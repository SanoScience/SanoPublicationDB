<h1>New Publication</h1>

<%= form_with(model: @publication, local: true, html: { class: 'needs-validation', novalidate: true }) do |form| %>
  <% if @publication.errors.any? %>
    <div class="alert alert-danger">
      <h2><%= pluralize(@publication.errors.count, "error") %> prohibited this publication from being saved:</h2>
      <ul>
        <% @publication.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= form.label :title, class: 'form-label' %>
    <%= form.text_field :title, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= form.label :category, class: 'form-label' %>
    <%= form.select :category, 
        Publication.categories.keys.map { |key| [key.humanize, key] }, 
        {}, class: 'form-select' %>
  </div>

  <div class="mb-3">
    <%= form.label :status, class: 'form-label' %>
    <%= form.select :status, 
        Publication.statuses.keys.map { |key| [key.humanize, key] }, 
        {}, class: 'form-select' %>
  </div>

  <div class="mb-3">
    <%= form.label :author_list, class: 'form-label' %>
    <%= form.text_area :author_list, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= form.label :publication_date, class: 'form-label' %>
    <%= form.date_field :publication_date, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= form.label :link, class: 'form-label' %>
    <%= form.text_field :link, class: 'form-control' %>
  </div>

  <hr>

  <h3> Research Groups Section </h3>
  <div id="research-groups">
    <div class="research-group mb-3">
      <%= form.fields_for :research_group_publications, @publication.research_group_publications.build do |rg_form| %>
        <div class="mb-3">
          <%= rg_form.label :research_group, class: 'form-label' %>
          <%= rg_form.select :research_group, 
              ResearchGroupPublication.research_groups.keys.map { |key| [key.humanize, key] }, 
              {}, class: 'form-select' %>
        </div>

        <div id="is-primary-container" class="mb-3">
          <%= rg_form.label :is_primary, class: 'form-label' %>

          <!-- Hidden field to ensure a default value of 0 is submitted -->
          <%= rg_form.hidden_field :is_primary, value: 0 %>
          <%= rg_form.check_box :is_primary, {}, 1, 0 %>
          <%= rg_form.label :is_primary, 'Primary?' %>
        </div>
        
        <button type="button" class="btn btn-danger btn-sm delete-research-group" style="display: none;">Delete</button>
      <% end %>
    </div>
  </div>

  <div class="mb-3">
    <%= button_tag 'Add Another Research Group', type: 'button', id: 'add-research-group', class: 'btn btn-primary' %>
  </div>

  <hr>

  <h3> Identifiers Section </h3>
  <div id="identifiers">
  </div>

  <div class="mb-3">
    <%= button_tag 'Add Identifier', type: 'button', id: 'add-identifier', class: 'btn btn-primary' %>
  </div>

  <hr>

  <h3> Repository Links Section </h3>
  <div id="repository-links">
  </div>

  <div class="mb-3">
    <%= button_tag 'Add Repository Link', type: 'button', id: 'add-repository-link', class: 'btn btn-primary' %>
  </div>

  <hr>

  <h3>KPI Reporting Extension</h3>
  <div class="mb-3">
    <div class="form-check form-switch">
      <input class="form-check-input" type="checkbox" id="kpi-toggle" name="create_kpi_extension">
      <label class="form-check-label" for="kpi-toggle">Add KPI Reporting Extension</label>
    </div>
  </div>

  <div id="kpi-extension-fields" style="display: none;">
    <%= form.fields_for :kpi_reporting_extension, @publication.kpi_reporting_extension || @publication.build_kpi_reporting_extension do |kpi_form| %>
      <div class="mb-3">
        <%= kpi_form.label :teaming_reporting_period, "Teaming Reporting Period", class: 'form-label' %>
        <%= kpi_form.number_field :teaming_reporting_period, class: 'form-control' %>
      </div>
      
      <div class="mb-3">
        <%= kpi_form.label :invoice_number, "Invoice Number", class: 'form-label' %>
        <%= kpi_form.number_field :invoice_number, class: 'form-control' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :pbn, class: 'form-check-input' %>
        <%= kpi_form.label :pbn, "PBN", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :jcr, class: 'form-check-input' %>
        <%= kpi_form.label :jcr, "JCR", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :is_added_ft_portal, class: 'form-check-input' %>
        <%= kpi_form.label :is_added_ft_portal, "Added to FT Portal", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :is_checked, class: 'form-check-input' %>
        <%= kpi_form.label :is_checked, "Checked", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :is_new_method_technique, class: 'form-check-input' %>
        <%= kpi_form.label :is_new_method_technique, "New Method/Technique", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :is_methodology_application, class: 'form-check-input' %>
        <%= kpi_form.label :is_methodology_application, "Methodology Application", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3 form-check">
        <%= kpi_form.check_box :is_polish_med_researcher_involved, class: 'form-check-input' %>
        <%= kpi_form.label :is_polish_med_researcher_involved, "Polish Medical Researcher Involved", class: 'form-check-label' %>
      </div>
      
      <div class="mb-3">
        <%= kpi_form.label :subsidy_points, "Subsidy Points", class: 'form-label' %>
        <%= kpi_form.number_field :subsidy_points, class: 'form-control' %>
      </div>
    <% end %>
  </div>

  <hr>

  <div class="mb-3">
    <%= form.submit "Create Publication", class: 'btn btn-success' %>
  </div>
<% end %>

<%= link_to 'Back', publications_path, class: 'btn btn-secondary' %>

<script>
  // Wrap everything in an IIFE (Immediately Invoked Function Expression)
  // to avoid variable redeclaration issues with Turbo
  (function() {
    // Only initialize if not already initialized
    if (window.publicationFormInitialized) return;
    window.publicationFormInitialized = true;
    
    // Generic function to handle adding new nested items
    function addNestedItem(containerId, itemClass, deleteButtonClass, getOptionsFunc) {
      const container = document.getElementById(containerId);
      
      // If container is empty, create the first item
      if (container.children.length === 0) {
        recreateTemplate(container, itemClass, deleteButtonClass, getOptionsFunc);
        return;
      }
      
      const template = container.querySelector(`.${itemClass}`);
      const newItem = template.cloneNode(true);
      
      // Get the current number of items
      const index = container.querySelectorAll(`.${itemClass}`).length;

      // Update all form elements with the new index
      const inputs = newItem.querySelectorAll('input, select');
      inputs.forEach(input => {
        const name = input.getAttribute('name');
        if (name) {
          input.setAttribute('name', name.replace(/\[\d*\]/, `[${index}]`));
        }
        
        // Update ID if it exists
        if (input.id && input.id.includes(`${itemClass}-value`)) {
          input.id = `${itemClass}-value-${index}`;
        }
      });
      
      // Show delete button for the new item
      const deleteButton = newItem.querySelector(`.${deleteButtonClass}`);
      if (deleteButton) {
        deleteButton.style.display = 'block';
        
        // Add event listener to the delete button
        deleteButton.addEventListener('click', function() {
          newItem.remove();
        });
      }
      
      container.appendChild(newItem);
    }

    // Generic function to recreate templates
    function recreateTemplate(container, itemClass, deleteButtonClass, getOptionsFunc) {
      const newTemplate = document.createElement('div');
      newTemplate.className = `${itemClass} mb-3`;
      
      let templateHTML = '';
      
      if (itemClass === 'research-group') {
        templateHTML = `
          <div class="mb-3">
            <label class="form-label">Research group</label>
            <select class="form-select" name="publication[research_group_publications_attributes][0][research_group]">
              ${getOptionsFunc()}
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Is primary</label>
            <input type="hidden" name="publication[research_group_publications_attributes][0][is_primary]" value="0">
            <input type="checkbox" name="publication[research_group_publications_attributes][0][is_primary]" value="1">
            <label>Primary?</label>
          </div>`;
      } else if (itemClass === 'identifier') {
        templateHTML = `
          <div class="mb-3">
            <label class="form-label">Category</label>
            <select class="form-select" name="publication[identifiers_attributes][0][category]">
              ${getOptionsFunc()}
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Value</label>
            <input type="text" id="${itemClass}-value-0" class="form-control" name="publication[identifiers_attributes][0][value]">
          </div>`;
      } else if (itemClass === 'repository-link') {
        templateHTML = `
          <div class="mb-3">
            <label class="form-label">Repository</label>
            <select class="form-select" name="publication[repository_links_attributes][0][repository]">
              ${getOptionsFunc()}
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Value</label>
            <input type="text" id="${itemClass}-value-0" class="form-control" name="publication[repository_links_attributes][0][value]">
          </div>`;
      }
      
      templateHTML += `<button type="button" class="btn btn-danger btn-sm ${deleteButtonClass}" style="display: block;">Delete</button>`;
      newTemplate.innerHTML = templateHTML;
      
      container.appendChild(newTemplate);
      
      // Add event listener to the delete button
      const deleteButton = newTemplate.querySelector(`.${deleteButtonClass}`);
      deleteButton.addEventListener('click', function() {
        newTemplate.remove();
      });
    }

    // Helper functions to get options for select elements
    function getResearchGroupOptions() {
      const select = document.querySelector('#research-groups select');
      if (select) {
        return select.innerHTML;
      } else {
        return `<%= raw ResearchGroupPublication.research_groups.map { |k, v| "<option value=\"#{k}\">#{v}</option>" }.join %>`;
      }
    }

    function getIdentifierCategoryOptions() {
      const select = document.querySelector('#identifiers select');
      if (select) {
        return select.innerHTML;
      } else {
        return `<%= raw Identifier.categories.map { |k, v| "<option value=\"#{k}\">#{k.humanize}</option>" }.join %>`;
      }
    }

    function getRepositoryOptions() {
      const select = document.querySelector('#repository-links select');
      if (select) {
        return select.innerHTML;
      } else {
        return `<%= raw RepositoryLink.repositories.map { |k, v| "<option value=\"#{k}\">#{k.humanize}</option>" }.join %>`;
      }
    }

    // Add event listeners to buttons
    const addResearchGroupBtn = document.getElementById('add-research-group');
    if (addResearchGroupBtn) {
      addResearchGroupBtn.addEventListener('click', function() {
        addNestedItem('research-groups', 'research-group', 'delete-research-group', getResearchGroupOptions);
      });
    }

    const addIdentifierBtn = document.getElementById('add-identifier');
    if (addIdentifierBtn) {
      addIdentifierBtn.addEventListener('click', function() {
        addNestedItem('identifiers', 'identifier', 'delete-identifier', getIdentifierCategoryOptions);
      });
    }

    const addRepositoryLinkBtn = document.getElementById('add-repository-link');
    if (addRepositoryLinkBtn) {
      addRepositoryLinkBtn.addEventListener('click', function() {
        addNestedItem('repository-links', 'repository-link', 'delete-repository-link', getRepositoryOptions);
      });
    }

    // Add event listeners to all initial delete buttons
    document.querySelectorAll('.delete-research-group, .delete-identifier, .delete-repository-link').forEach(button => {
      button.addEventListener('click', function() {
        this.closest('.research-group, .identifier, .repository-link').remove();
      });
    });

    // KPI Extension toggle functionality
    const kpiToggleElement = document.getElementById('kpi-toggle');
    if (kpiToggleElement) {
      kpiToggleElement.addEventListener('change', function() {
        const kpiFields = document.getElementById('kpi-extension-fields');
        if (kpiFields) {
          kpiFields.style.display = this.checked ? 'block' : 'none';
          
          // Clear fields when toggle is unchecked
          if (!this.checked) {
            const kpiInputs = kpiFields.querySelectorAll('input[type="text"], input[type="number"], input[type="checkbox"]');
            kpiInputs.forEach(input => {
              if (input.type === 'checkbox') {
                input.checked = false;
              } else {
                input.value = '';
              }
            });
          }
        }
      });
    }
  })();
</script>

